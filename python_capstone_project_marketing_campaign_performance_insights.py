# -*- coding: utf-8 -*-
"""Python Capstone Project - Marketing Campaign Performance Insights.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LZY7Ro1VHr2pqwtcNPBGEcYFm8OrheaL

# Marketing Campaign Performance Insights

## 1 - Load the dataset
"""

import pandas as pd
file_path = "/content/marketing_campaign-capstone.csv"
df = pd.read_csv(file_path)
print(df)

"""## 2 - descriptive analysis

### Basic structure
"""

# 1 - Print first few rows
print(df.head())

# 2 - Number of rows and columns
print(df.shape)

# 3 - Summary of the dataset
print(df.info())

# 4 - Descriptive statistics for numeric columns
print(df.describe().round(2))

"""### Data Exploration"""

# 1 - Print Unique Compaign values
Unique_Capaigns = df["Campaign_ID"].nunique()
print(Unique_Capaigns)

# 2 - Unique Values of Locations and Customer segments
Unique_location = df["Location"].unique()
print(Unique_location, "\n")
Customer_Segment = df["Customer_Segment"].unique()
print(Customer_Segment,"\n")

# 3 - Occurences of each categary in Campaign_Type and Channel_used
count_of_Campaign_Type = df["Campaign_Type"].value_counts()
print(count_of_Campaign_Type, "\n")
count_of_Channel_Used = df["Channel_Used"].value_counts()
print(count_of_Channel_Used, "\n")

"""## 3 - Exploratory Data Analysis (EDA) and Visualization

### Campaign Performance
"""

# 1 - Scatter plot for Acquisition_Cost and ROI
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

file_path = "/content/marketing_campaign-capstone.csv"
df = pd.read_csv(file_path)

sns.set(style = "whitegrid")
plt.figure(figsize = (10, 5))
sns.scatterplot(data = df, x = "Acquisition_Cost", y = "ROI")
plt.title("Relationship Between Acquisition_Cost and ROI")
plt.xlabel("Acquisition_Cost")
plt.ylabel("ROI")
plt.show()

# 2 - Average conversion rate for Channel used over  Compaign type
plt.figure(figsize = (10, 5))
sns.barplot(data = df, x = "Channel_Used", y = "Conversion_Rate", hue = "Campaign_Type", errorbar = None)
plt.title("Average Conversion Rate for Channel Used Over Campaign Type")
plt.xlabel("Channel_Used")
plt.ylabel("Conversion_Rate")
plt.legend("Campaign_Type")
plt.xticks(rotation = 90)
plt.show()

# 3 - distribution of Engagement_Score across different Campaign_Type using box plot
plt.figure(figsize = (10, 5))
sns.boxplot(data = df, x = "Engagement_Score", y = "Campaign_Type")
plt.title(" distribution of Engagement_Score across different Campaign_Type using box plot")
plt.xlabel("Engagement_Score")
plt.ylabel("Campaign_Type")
plt.show()

# 4 - Analyze the average ROI by Company using a bar chart to compare the profitability of campaigns conducted by different companies.
Avg_ROI_by_company = df.groupby("Company")["ROI"].mean().reset_index()
plt.figure(figsize = (10, 5))
sns.barplot(data = Avg_ROI_by_company, x = "Company", y = "ROI")
plt.title("Analyze average ROI by Company")
plt.xlabel("Company")
plt.ylabel("ROI")
plt.xticks(rotation = 45)
plt.show()

# 5 - correlation between Engagement_Score and Conversion_Rate
correlation = df[["Engagement_Score", "Conversion_Rate"]].corr()
plt.figure(figsize = (10, 5))
sns.heatmap(correlation, annot = True, cmap = "coolwarm", vmin = -1, vmax = 1)
plt.title("correlation between Engagement_Score and Conversion_Rate")
plt.show()

"""### Customer Segmentation

"""

# 1 - count plot for Target_audience
plt.figure(figsize = (10, 5))
sns.countplot(data = df, x = "Target_Audience")
plt.title("Count plot for Target_Audience")
plt.xlabel("Target_Audience")
plt.show()

# 2 - Bar chart for Highest conversion rate for each language
plt.figure(figsize = (10, 5))
sns.barplot(data = df, x = "Customer_Segment", y = "Conversion_Rate", hue = "Language")
plt.title("Highest conversion rate between Customer_Segment and Conversion_Rate bu Language")
plt.xlabel("Customer_Segment")
plt.ylabel("Conversion_Rate")
plt.xticks(rotation = 45)
plt.show()

# 3 - Visualize the distribution of Acquisition_Cost across each Customer_Segment, categorized by Channel_Used, using a box plot.
plt.figure(figsize = (10, 5))
sns.boxplot(data = df, x = "Customer_Segment", y = "Acquisition_Cost", hue = "Channel_Used")
plt.title("Distribution of Acquisition_Cost across each Customer_Segment, categorized by Channel_Used")
plt.xlabel("Customer_Segment")
plt.xlabel("Acquisition_Cost")
plt.show()

# 4 - Analyze average Conversion_Rate by Language using a bar chart to compare the effectiveness of campaigns conducted in different languages.
plt.figure(figsize = (10, 5))
sns.barplot(data = df, x = "Language", y = "Conversion_Rate", estimator = "mean")
plt.title("Analyze average Conversion_Rate by Language")
plt.xlabel("Language")
plt.ylabel("Converson_Rate")
plt.show()

"""## Channel Effectiveness"""

# 1 - Compare the Engagement_Score for different Channels_Used, segmented by Campaign_Type, using a bar chart.
plt.figure(figsize = (10, 5))
sns.barplot(data = df, x = "Channel_Used", y = "Engagement_Score", hue = "Campaign_Type")
plt.title("Engagement_Score for different Channels_Used by Campaign_type")
plt.xlabel("Channel_Used")
plt.ylabel("Engagement_Score")
plt.show()

# 2 - Show the distribution of total ROI across different Channels_Used using a pie chart.
ROI_Data = df.groupby("Channel_Used")["ROI"].sum()
plt.figure(figsize = (10, 5))
plt.pie(ROI_Data, labels = ROI_Data.index)
plt.title("Distribution of total ROI across different Channels_Used")
plt.show()

# 3 - Plot a scatter plot to show the relationship between Clicks and Impressions for each Channel_Used.
plt.figure(figsize = (10, 5))
sns.scatterplot(data = df, x = "Clicks", y = "Impressions", hue = "Channel_Used")
plt.title("Relationship between Clicks and Impressions for each Channel_Used")
plt.xlabel("Clicks")
plt.ylabel("Impressions")
plt.show()

"""### Time Based Analysis"""

# 1 - Plot the distribution of Duration using a histogram.
plt.figure(figsize = (10, 5))
sns.histplot(data = df, x = "Duration", bins = 20)
plt.title("Distribution of Duration")
plt.xlabel("Duration")
plt.show()

# 2 - Analyze how the overall Conversion_Rate has changed over Date for each Company using a line chart.
plt.figure(figsize = (10, 5))
sns.lineplot(data = df, x = "Date", y = "Conversion_Rate", hue = "Company")
plt.title("Conversion_Rate over Date for each Company")
plt.xlabel("Date")
plt.ylabel("Conversion_Rate")
plt.show()

# 3 - Examine the trend of Engagement_Score over Date with a line chart.
plt.figure(figsize = (10, 5))
sns.lineplot(data = df, x = "Date", y = "Engagement_Score")
plt.title("Engagement_Score over Date")
plt.xlabel("Date")
plt.ylabel("Engagement_Score")
plt.show()

"""### Geographic analysis"""

# 1 - Determine which location has the highest Acquisition_Cost using a bar chart.
plt.figure(figsize = (10, 5))
sns.barplot(data = df, x = "Location", y = "Acquisition_Cost", estimator = "mean")
plt.title("Location with highest Acquisition_Cost")
plt.xlabel("Location")
plt.ylabel("Acquisition_Cost")
plt.show()

# 2 - Visualize the Conversion_Rate by different Location, categorized by Target_Audience, using a bar chart.
plt.figure(figsize = (10, 5))
sns.barplot(data = df, x = "Location", y = "Conversion_Rate", hue = "Target_Audience")
plt.title("Conversion_Rate by Location, categorized by Target_Audience")
plt.xlabel("Location")
plt.ylabel("Conversion_Rate")
plt.xticks(rotation = 90)
plt.show()

# 3 - Illustrate the proportion of ROI by Location using a pie chart.
ROI_Laocation_data = df.groupby("Location")["ROI"].sum()
plt.figure(figsize = (10, 5))
plt.pie(ROI_Laocation_data, labels = ROI_Laocation_data.index)
plt.title("Proportion of ROI by Location")
plt.show()